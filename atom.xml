<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[赵九州的博客]]></title>
  <subtitle><![CDATA[虽然咸鱼翻身还是咸鱼,但至少可以变得好吃一点...]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://jiuzhou-romens.github.io.git/"/>
  <updated>2016-05-26T02:43:08.000Z</updated>
  <id>http://jiuzhou-romens.github.io.git/</id>
  
  <author>
    <name><![CDATA[Geovyn]]></name>
    <email><![CDATA[zhaojiuzhou@163.com#你的联系邮箱]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Android 开发学习]]></title>
    <link href="http://jiuzhou-romens.github.io.git/2016/05/26/Android%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/"/>
    <id>http://jiuzhou-romens.github.io.git/2016/05/26/Android开发学习/</id>
    <published>2016-05-26T02:43:08.000Z</published>
    <updated>2016-05-26T02:43:08.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1-环境部署">1.环境部署</h3><pre><code>工欲善其事必先利其器，要做Android开发，肯定离不开开发环境的搭建
</code></pre><h4 id="Android开发环境搭建">Android开发环境搭建</h4><h5 id="Android_环境要求">Android 环境要求</h5><p>首先，你可以在以下的操作系统开始 Android 应用程序开发：</p>
<ul>
<li>Microsoft Windows XP 或更高版本</li>
<li>带有英特尔芯片的 Mac OS X10.5.8或更高版本。</li>
<li>包括 GNU C 库2.7或更高版本的 Linux 系统。</li>
</ul>
<p>第二，开发 Android 应用程序所需的所有工具都是免费的，可以从网上下载。以下是开始开发 Android 应用程序需要用到的软件列表。</p>
<ul>
<li>Java JDK5 或 以后版本</li>
<li>Android SDK</li>
<li>Java运行时环境（JRE）</li>
<li>Android Studio</li>
<li>(可选的)Java开发者使用的Eclipse IDE</li>
<li>(可选的)Android开发工具(ADT)Eclipse插件</li>
</ul>
<p>最后两个组件是可选的，如果是在 Windows 机器上工作，这些组件将方便于开发基于 Java 的应用程序。因此，让我们来看看如何来设置所需的环境。<br><a id="more"></a></p>
<h5 id="安装_Java_开发工具包(JDK)">安装 Java 开发工具包(JDK)</h5><p>你可以从 Oracle 的 Java 网站：<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="external">JDKJava SE</a>下载下载最新版本的 Java 。在下载的文件中找到安装JDK的说明文档，按照给定的说明来安装和配置设置。最后设置 PATH 和 JAVA_HOME 环境变量来引用包含 javac 和 java的目录，通常分别为 java_install_dir/bin 和 java_install_dir。</p>
<p>如果运行的是 Windows，把 JDK 安装在 C:\jdk1.6.0_15，在 C:\autoexec.bat 文件添加以下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set PATH=C:\jdk1.6.0_15\bin;%PATH%&#10;set JAVA_HOME=C:\jdk1.6.0_15</span><br></pre></td></tr></table></figure>
<p>你也可以右键单击”我的电脑”，选择”属性”=》”高级”=》”环境变量”，然后通过按下”确定”按钮来更新 PATH 值。</p>
<p>在 Linux 上，如果 SDK 安装在 /usr/local/jdk1.6.0_15 下，并且使用的是 C shell，把下面的代码到写入 .cshrc 文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setenv PATH /usr/local/jdk1.6.0_15/bin:$PATH&#10;setenv JAVA_HOME /usr/local/jdk1.6.0_15</span><br></pre></td></tr></table></figure>
<p>如果你使用集成开发环境 Eclipse，那么它自动知道 Java 已安装在哪里。</p>
<p>有许多复杂而精巧的技术来开发 Android 应用程序。目前主要使用且相似的技术主要是以下两种：</p>
<ul>
<li>Android Studio</li>
<li>Eclipse ADT  谷歌官方已放弃更新,不推荐</li>
</ul>
<p>以下附上AndroidStudio的安装教程</p>
<ul>
<li><a href="http://www.jianshu.com/p/fc03942548cc" target="_blank" rel="external">Windows</a></li>
<li><a href="http://blog.csdn.net/shawnkong/article/details/13510131" target="_blank" rel="external">Linux</a></li>
<li><a href="http://hao.jser.com/archive/5392/" target="_blank" rel="external">Mac</a></li>
</ul>
<h5 id="2-Android基础">2.<a href="http://www.runoob.com/w3cnote/android-tutorial-contents.html" target="_blank" rel="external">Android基础</a></h5><h5 id="3-Android开发进阶">3.Android开发进阶</h5><ul>
<li><a href="">Android Camera</a></li>
<li><a href="">Android 多媒体</a></li>
<li><a href="">自定义控件</a></li>
<li><a href="">进程通信 aidl</a></li>
<li><a href="">第三方集成</a></li>
<li><a href="">设计模式</a></li>
<li><a href="">框架架构</a></li>
</ul>
<h5 id="4-资源">4.资源</h5><ul>
<li><a href="https://github.com/Trinea/android-open-project#%E4%B8%80listview" target="_blank" rel="external">开源库</a></li>
<li><a href="http://www.apkbus.com/forum-417-1.html" target="_blank" rel="external">精品资源</a></li>
<li><a href="http://pan.baidu.com/s/1gdYFJPL" target="_blank" rel="external">Android基础学习视频 密码bybt</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1-环境部署">1.环境部署</h3><pre><code>工欲善其事必先利其器，要做Android开发，肯定离不开开发环境的搭建
</code></pre><h4 id="Android开发环境搭建">Android开发环境搭建</h4><h5 id="Android_环境要求">Android 环境要求</h5><p>首先，你可以在以下的操作系统开始 Android 应用程序开发：</p>
<ul>
<li>Microsoft Windows XP 或更高版本</li>
<li>带有英特尔芯片的 Mac OS X10.5.8或更高版本。</li>
<li>包括 GNU C 库2.7或更高版本的 Linux 系统。</li>
</ul>
<p>第二，开发 Android 应用程序所需的所有工具都是免费的，可以从网上下载。以下是开始开发 Android 应用程序需要用到的软件列表。</p>
<ul>
<li>Java JDK5 或 以后版本</li>
<li>Android SDK</li>
<li>Java运行时环境（JRE）</li>
<li>Android Studio</li>
<li>(可选的)Java开发者使用的Eclipse IDE</li>
<li>(可选的)Android开发工具(ADT)Eclipse插件</li>
</ul>
<p>最后两个组件是可选的，如果是在 Windows 机器上工作，这些组件将方便于开发基于 Java 的应用程序。因此，让我们来看看如何来设置所需的环境。<br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://jiuzhou-romens.github.io.git/tags/Android/"/>
    
      <category term="学习记录" scheme="http://jiuzhou-romens.github.io.git/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="Android" scheme="http://jiuzhou-romens.github.io.git/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Andriod 开发规范]]></title>
    <link href="http://jiuzhou-romens.github.io.git/2016/05/26/Android%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
    <id>http://jiuzhou-romens.github.io.git/2016/05/26/Android开发规范/</id>
    <published>2016-05-26T02:33:17.000Z</published>
    <updated>2016-05-26T02:33:17.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>“The only way to make the deadline - the only way to go fast - is to keep the code as clean as possible at all times.” –Robert C. Martin</p>
</blockquote>
<h2 id="一、书写规范">一、书写规范</h2><h4 id="1-编码">1.编码</h4><p>编码方式统一用UTF-8. Android Studio默认已是UTF-8。<br><img src="http://7xs8qe.com2.z0.glb.qiniucdn.com/Romens%20android%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83_1.png" alt="1"><br><a id="more"></a></p>
<h4 id="2-缩进">2.缩进</h4><p>缩进统一为4个空格，将Tab size设置为4则可以保证tab键按4个空格缩进。另外，不要勾选上Use tab character，可以保证切换到不同tab长度的环境时还能继续保持统一的4个空格的缩进样式。<br><img src="http://7xs8qe.com2.z0.glb.qiniucdn.com/Romens%20android%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83_2.png" alt="2"></p>
<h4 id="3-括号">3.括号</h4><p>花括号不要单独一行，和它前面的代码同一行。而且，花括号与前面的代码之间用一个空格隔开。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123; <span class="comment">// Good</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span><br><span class="line"></span>&#123; <span class="comment">// Bad</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123; <span class="comment">// Bad</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="4-空格">4.空格</h4><p>if、else、for、switch、while等逻辑关键字与后面的语句留一个空格隔开。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Good</span></span><br><span class="line"><span class="keyword">if</span> (booleanVariable) &#123;</span><br><span class="line">    <span class="comment">// TODO while booleanVariable is true</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// TODO else</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bad</span></span><br><span class="line"><span class="keyword">if</span>(booleanVariable) &#123;</span><br><span class="line">    <span class="comment">// TODO while booleanVariable is true</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// TODO else</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运算符两边各用一个空格隔开。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> result = a + b; <span class="comment">//Good, = 和 + 两边各用一个空格隔开</span></span><br><span class="line"><span class="keyword">int</span> result=a+b; <span class="comment">//Bad,=和+两边没用空格隔开</span></span><br></pre></td></tr></table></figure></p>
<p>方法的每个参数之间用一个空格隔开。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(String param1, String param2)</span></span>; <span class="comment">// Good，param1后面的逗号与String之间隔了一个空格</span></span><br><span class="line">method(param1, param2); <span class="comment">// Good，方法调用时，param1后面的逗号与param2之间隔了一个空格</span></span><br><span class="line">method(param1,param2); <span class="comment">// Bad，没有用一个空格隔开</span></span><br></pre></td></tr></table></figure></p>
<h4 id="5-空行">5.空行</h4><p>将逻辑相关的代码段用空行隔开，以提高可读性。空行也只空一行，不要空多行。在以下情况需用一个空行：</p>
<ul>
<li>两个方法之间</li>
<li>方法内的两个逻辑段之间</li>
<li><del>方法内的局部变量和方法的第一条逻辑语句之间</del></li>
<li>常量和变量之间</li>
</ul>
<h4 id="6-换行">6.换行</h4><p>当一个表达式无法容纳在一行内时，可换行显示，另起的新行用8个空格缩进。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">someMethod(longExpression1, longExpression2, longExpression3,</span><br><span class="line">        longExpression4, longExpression5);</span><br></pre></td></tr></table></figure></p>
<h4 id="7-声明">7.声明</h4><p>一行声明一个变量，不要一行声明多个变量，这样有利于写注释。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String param1; <span class="comment">// 参数1</span></span><br><span class="line"><span class="keyword">private</span> String param2; <span class="comment">// 参数2</span></span><br></pre></td></tr></table></figure></p>
<h4 id="8-行宽">8.行宽</h4><p>行宽设置为100，设置格式化时自动断行到行宽位置。<br><img src="http://7xs8qe.com2.z0.glb.qiniucdn.com/Romens%20android%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83_3.jpeg" alt="3"><br><img src="http://7xs8qe.com2.z0.glb.qiniucdn.com/Romens%20android%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83_4.jpeg" alt="4"></p>
<h4 id="9-格式化">9.格式化</h4><p>使用快捷键进行代码自动格式化。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Windows：CTRL+ALT+L</span><br><span class="line">Mac：OPTION+COMMAND+L</span><br></pre></td></tr></table></figure></p>
<h4 id="10-方法行数">10.方法行数</h4><p>一个方法最多不要超过40行代码。</p>
<h4 id="11-常量">11.常量</h4><p>范围型的常量用枚举类定义，而不要直接用整型或字符，这样可以减少范围值的有效性检查。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用枚举类定义，Good</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> CouponType &#123;</span><br><span class="line">    <span class="comment">// 现金券</span></span><br><span class="line">    <span class="annotation">@SerializedName</span>(<span class="string">"1"</span>)</span><br><span class="line">    CASH,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抵用券</span></span><br><span class="line">    <span class="annotation">@SerializedName</span>(<span class="string">"2"</span>)</span><br><span class="line">    DEBIT,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 折扣券</span></span><br><span class="line">    <span class="annotation">@SerializedName</span>(<span class="string">"3"</span>)</span><br><span class="line">    DISCOUNT</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用整型定义，Bad</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_CASH = <span class="number">1</span>; <span class="comment">// 现金券</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_DEBIT = <span class="number">2</span>; <span class="comment">// 抵扣券</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_DISCOUNT = <span class="number">3</span>; <span class="comment">// 折扣券</span></span><br></pre></td></tr></table></figure></p>
<h4 id="12-大小单位">12.大小单位</h4><p>文字大小的单位统一用sp，元素大小的单位统一用dp。</p>
<h4 id="13-String值定义">13.String值定义</h4><p>应用中的字符串统一在strings.xml中定义，然后在代码和布局文件中引用。</p>
<h4 id="14-颜色值定义">14.颜色值定义</h4><p>颜色值统一在colors.xml中定义，然后在代码和布局文件中引用。另外，不要在代码和布局文件中引用系统的颜色，除了透明，因为一旦升级版本，可能会改变。</p>
<h2 id="命名规范">命名规范</h2><h4 id="1-包">1.包</h4><p>域名反写+项目名称+模块名称，全部单词用小写字母。<br>例如，Grab项目的app模块包名如下：<br>cn.romens.grab.app</p>
<h4 id="2-类和接口">2.类和接口</h4><p>使用大驼峰规则，用名词或名词词组命名，每个单词的首字母大写。<br>以下为几种常用类的命名：</p>
<ul>
<li>activity类，命名以Activity为后缀，如：LoginActivity</li>
<li>fragment类，命名以Fragment为后缀，如：ShareDialogFragment</li>
<li>service类，命名以Service为后缀，如：DownloadService</li>
<li>adapter类，命名以Adapter为后缀，如：CouponListAdapter</li>
<li>工具类，命名以Util为后缀，如：EncryptUtil</li>
<li><del>模型类，命名以BO为后缀，如：CouponBO</del></li>
<li><del>接口实现类，命名以Impl为后缀，如：ApiImpl</del></li>
</ul>
<h4 id="3-方法">3.方法</h4><p>使用小驼峰规则，用动词命名，第一个单词的首字母小写，其他单词的首字母大写。<br>以下为几种常用方法的命名：</p>
<ul>
<li>初始化方法，命名以init开头，例：initView</li>
<li>按钮点击方法，命名以to开头，例：toLogin</li>
<li>设置方法，命名以set开头，例：setData</li>
<li>具有返回值的获取方法，命名以get开头，例：getData</li>
<li>通过异步加载数据的方法，命名以load开头，例：loadData</li>
<li>布尔型的判断方法，命名以is或has，或具有逻辑意义的单词如equals，例：isEmpty</li>
</ul>
<h4 id="4-_控件缩写">4. 控件缩写</h4><table>
<thead>
<tr>
<th>控件</th>
<th>缩写</th>
<th>控件</th>
<th>缩写</th>
</tr>
</thead>
<tbody>
<tr>
<td>TextView</td>
<td>txt</td>
<td>EditText</td>
<td>edt</td>
</tr>
<tr>
<td>Button</td>
<td>btn</td>
<td>ImageButton</td>
<td>ibtn</td>
</tr>
<tr>
<td>ImageView</td>
<td>img</td>
<td>ListView</td>
<td>list</td>
</tr>
<tr>
<td>RadioGroup</td>
<td>group</td>
<td>RadioButton</td>
<td>rbtn</td>
</tr>
<tr>
<td>ProgressBar</td>
<td>progress</td>
<td>SeekBar</td>
<td>seek</td>
</tr>
<tr>
<td>CheckBox</td>
<td>chk</td>
<td>Spinner</td>
<td>spinner</td>
</tr>
<tr>
<td>TableLayout</td>
<td>table</td>
<td>TableRow</td>
<td>row</td>
</tr>
<tr>
<td>LinearLayout</td>
<td>llayout</td>
<td>RelativeLayout</td>
<td>rlayout</td>
</tr>
<tr>
<td>ScrollView</td>
<td>scroll</td>
<td>SearchView</td>
<td>search</td>
</tr>
<tr>
<td>TabHost</td>
<td>host</td>
<td>TabWidget</td>
<td>widget</td>
</tr>
</tbody>
</table>
<h4 id="5-常量">5.常量</h4><p>全部为大写单词，单词之间用下划线分开。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> PAGE_SIZE = <span class="number">20</span>;</span><br></pre></td></tr></table></figure></p>
<h4 id="6-变量">6.变量</h4><p>{范围描述+}意义描述+类型描述的组合，用驼峰式，首字母小写。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> TextView headerTitleTxt; <span class="comment">// 标题栏的标题</span></span><br><span class="line"><span class="keyword">private</span> Button loginBtn; <span class="comment">// 登录按钮</span></span><br><span class="line"><span class="keyword">private</span> CouponBO couponBO; <span class="comment">// 券实例</span></span><br></pre></td></tr></table></figure></p>
<h4 id="7-控件id">7.控件id</h4><p>控件缩写<em>{范围</em>}意义，范围可选，只在有明确定义的范围内才需要加上。<br><!-- 这是标题栏的标题 --><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">    <span class="attribute">android:id</span>=<span class="value">"@+id/txt_header_title"</span></span><br><span class="line">    <span class="attribute">...</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 这是登录按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">Button</span></span><br><span class="line">    <span class="attribute">android:id</span>=<span class="value">"@+id/btn_login"</span></span><br><span class="line">    <span class="attribute">...</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="8-layout">8.layout</h4><p>组件类型<em>{范围</em>}功能，范围可选，只在有明确定义的范围内才需要加上。<br>以下为几种常用的组件类型命名：</p>
<ul>
<li>activity<em>{范围</em>}功能，为Activity的命名格式</li>
<li>fragment<em>{范围</em>}功能，为Fragment的命名格式</li>
<li>dialog<em>{范围</em>}功能，为Dialog的命名格式</li>
<li>item<em>list</em>{范围_}功能，为ListView的item命名格式</li>
<li>item<em>grid</em>{范围_}功能，为GridView的item命名格式</li>
<li>header<em>list</em>{范围_}功能，为ListView的HeaderView命名格式</li>
<li>footer<em>list</em>{范围_}功能，为ListView的FooterView命名格式</li>
</ul>
<h4 id="9-strings">9.strings</h4><p>类型<em>{范围</em>}功能，范围可选。<br>以下为几种常用的命名：</p>
<ul>
<li>页面标题，命名格式为：title_页面</li>
<li>按钮文字，命名格式为：btn_按钮事件</li>
<li>标签文字，命名格式为：label_标签文字</li>
<li>选项卡文字，命名格式为：tab_选项卡文字</li>
<li>消息框文字，命名格式为：toast_消息</li>
<li>编辑框的提示文字，命名格式为：hint_提示信息</li>
<li>图片的描述文字，命名格式为：desc_图片文字</li>
<li>对话框的文字，命名格式为：dialog_文字</li>
<li>menu的item文字，命名格式为：action_文字</li>
</ul>
<h4 id="10-colors">10.colors</h4><p>前缀{<em>控件}{</em>范围}{_后缀}，控件、范围、后缀可选，但控件和范围至少要有一个。</p>
<ul>
<li>背景颜色，添加bg前缀</li>
<li>文本颜色，添加text前缀</li>
<li>分割线颜色，添加div前缀</li>
<li>区分状态时，默认状态的颜色，添加normal后缀</li>
<li>区分状态时，按下时的颜色，添加pressed后缀</li>
<li>区分状态时，选中时的颜色，添加selected后缀</li>
<li>区分状态时，不可用时的颜色，添加disable后缀</li>
</ul>
<h4 id="11-drawable">11.drawable</h4><p>前缀{<em>控件}{</em>范围}{_后缀}，控件、范围、后缀可选，但控件和范围至少要有一个。</p>
<ul>
<li>图标类，添加ic前缀</li>
<li>背景类，添加bg前缀</li>
<li>分隔类，添加div前缀</li>
<li>默认类，添加def前缀</li>
<li>区分状态时，默认状态，添加normal后缀</li>
<li>区分状态时，按下时的状态，添加pressed后缀</li>
<li>区分状态时，选中时的状态，添加selected后缀</li>
<li>区分状态时，不可用时的状态，添加disable后缀</li>
<li>多种状态的，添加selector后缀（一般为ListView的selector或按钮的selector）</li>
</ul>
<h4 id="12-动画文件">12.动画文件</h4><p>动画类型_动画方向。</p>
<ul>
<li>fade_in，淡入</li>
<li>fade_out，淡出</li>
<li>push_down_in，从下方推入</li>
<li>push_down_out，从下方推出</li>
<li>slide_in_from_top，从头部滑动进入</li>
<li>zoom_enter，变形进入</li>
<li>shrink_to_middle，中间缩小</li>
</ul>
<h2 id="注释规范">注释规范</h2><h4 id="1-文件头">1.文件头</h4><p>文件顶部统一添加版权声明，声明的格式如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Copyright (c) 2016. Romens Inc. All rights reserved.</span><br><span class="line"> */</span></span><br></pre></td></tr></table></figure></p>
<h4 id="2-类和接口-1">2.类和接口</h4><p>类和接口统一添加javadoc注释，格式如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 类或接口的功能描述，如果需要的话</span><br><span class="line"> */</span></span><br></pre></td></tr></table></figure></p>
<h4 id="3-方法-1">3.方法</h4><p>下面几种方法，最好添加javadoc注释，说明该方法的用途和参数说明，以及返回值的说明。</p>
<ul>
<li>接口中定义的所有方法</li>
<li>抽象类中自定义的抽象方法</li>
<li>抽象父类的自定义公用方法</li>
<li>工具类的公用方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 登录</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> loginName 登录名</span><br><span class="line"> * <span class="doctag">@param</span> password  密码</span><br><span class="line"> * <span class="doctag">@param</span> listener  回调监听器</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String loginName, String password, ActionCallbackListener&lt;Void&gt; listener)</span></span>;</span><br></pre></td></tr></table></figure>
<h4 id="4-变量和常量">4.变量和常量</h4><p>下面几种情况下的常量和变量，都要添加注释说明，优先采用右侧//来注释，若注释说明太长则在上方添加注释。</p>
<ul>
<li>接口中定义的所有常量</li>
<li>公有类的公有常量</li>
<li>枚举类定义的所有枚举常量</li>
<li>实体类的所有属性变量</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_CASH = <span class="number">1</span>; <span class="comment">// 现金券</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_DEBIT = <span class="number">2</span>; <span class="comment">// 抵扣券</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_DISCOUNT = <span class="number">3</span>; <span class="comment">// 折扣券</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;                <span class="comment">// 券id</span></span><br><span class="line"><span class="keyword">private</span> String name;           <span class="comment">// 券名称</span></span><br><span class="line"><span class="keyword">private</span> String introduce;      <span class="comment">// 券简介</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>“The only way to make the deadline - the only way to go fast - is to keep the code as clean as possible at all times.” –Robert C. Martin</p>
</blockquote>
<h2 id="一、书写规范">一、书写规范</h2><h4 id="1-编码">1.编码</h4><p>编码方式统一用UTF-8. Android Studio默认已是UTF-8。<br><img src="http://7xs8qe.com2.z0.glb.qiniucdn.com/Romens%20android%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83_1.png" alt="1"><br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://jiuzhou-romens.github.io.git/tags/Android/"/>
    
      <category term="总结" scheme="http://jiuzhou-romens.github.io.git/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="Android" scheme="http://jiuzhou-romens.github.io.git/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[API 接口规范]]></title>
    <link href="http://jiuzhou-romens.github.io.git/2016/05/26/API%E6%8E%A5%E5%8F%A3%E8%A7%84%E8%8C%83/"/>
    <id>http://jiuzhou-romens.github.io.git/2016/05/26/API接口规范/</id>
    <published>2016-05-26T02:27:09.000Z</published>
    <updated>2016-05-26T02:27:09.000Z</updated>
    <content type="html"><![CDATA[<h2 id="安全机制">安全机制</h2><p>登录安全：</p>
<ol>
<li>密码登录后，服务器返回token给客户端</li>
<li>客户端保存token，每次发起请求时必须带上token</li>
<li>服务器检查token，若无效：<ol>
<li>token错误，则重新登录，刷新token</li>
<li>token过期，发起认证请求，获取新token<br>每个端分配一个加密的appKey，android、ios、pc、微信等每个端一个appKey，相当于另一个token。<br>纯app端可以采用另一种方式：<br>不用密码登录，直接手机号加短信验证码登录，好处：</li>
</ol>
</li>
<li>用不着重置密码操作了</li>
<li>不需要记密码，不怕密码泄露<a id="more"></a>
<h2 id="接口数据设计">接口数据设计</h2>采用json格式传输，json的值只有6种：</li>
</ol>
<ul>
<li>Number：整数或浮点数</li>
<li>String：字符串</li>
<li>Boolean：true或false</li>
<li>Array：数组包含在方括号[]中</li>
<li>Object：对象包含在大括号{}中</li>
<li>Null：空类型</li>
</ul>
<p>比如，时间直接用毫秒数表示。</p>
<h2 id="接口版本设计">接口版本设计</h2><p>两种版本设计：</p>
<ul>
<li>每个接口有各自的版本，一般为接口添加个version的参数</li>
<li>整个接口系统有统一版本，一般在url种添加版本号，比如：<a href="http://api.domain.com/v2" target="_blank" rel="external">http://api.domain.com/v2</a></li>
</ul>
<h2 id="接口优化设计">接口优化设计</h2><p>对于移动端来说，流量和速度是考虑的重点，当网络状况不好时，应该返回更简洁的数据</p>
<ol>
<li>网络请求不可用或入参错误时，不应该调用api，直接返回</li>
<li>非wifi网络时，禁止大文件下载和上传</li>
<li>wifi网络时应该返回更全面的数据</li>
<li>只返回更新的部分，比如：上一次请求返回了10条按时间排序的数据，第一条数据为最新的，id为101，当发起下一次请求时，将101的id作为参数调用API，API查到该id，发现该id之后又新增了两条数据，API则只返回新增的这两条数据。</li>
</ol>
<h2 id="json数据格式：">json数据格式：</h2><p>客户端请求格式：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    UserGuid: &lt;string&gt;,             //唯一标识用户的token字符串</span><br><span class="line"></span><br><span class="line">    QueryType: &lt;string&gt;,            //报文数据类型</span><br><span class="line"></span><br><span class="line">    Params: &#123;                       //与queryType对应的具体参数</span><br><span class="line">         "API_VERSION":"v1"         //api接口版本</span><br><span class="line">         "CONNECTION_TYPE":"wifi"   //连接类型</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>服务器返回格式：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    code：200</span><br><span class="line">    message: "success"</span><br><span class="line">    data: &#123; key1: value1, key2: value2, ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>code: 状态码，200表示成功，非200表示各种不同的错误，3XX表示客户端错误，4XX表示服务端错误，比如：<ul>
<li>200：成功</li>
<li>300：请求错误</li>
<li>301：缺少appKey</li>
<li>302：缺少签名</li>
<li>303：缺少参数</li>
<li>400：服务器出错</li>
<li>401：服务不可用</li>
<li>402：服务器正在重启</li>
</ul>
</li>
<li>message: 描述信息，成功时为”success”，错误时则是对用户友好的错误信息，可以直接展示给客户看</li>
<li>data: 成功时返回的数据，类型为对象或数组，比如：<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data: &#123; token: 123456 &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="安全机制">安全机制</h2><p>登录安全：</p>
<ol>
<li>密码登录后，服务器返回token给客户端</li>
<li>客户端保存token，每次发起请求时必须带上token</li>
<li>服务器检查token，若无效：<ol>
<li>token错误，则重新登录，刷新token</li>
<li>token过期，发起认证请求，获取新token<br>每个端分配一个加密的appKey，android、ios、pc、微信等每个端一个appKey，相当于另一个token。<br>纯app端可以采用另一种方式：<br>不用密码登录，直接手机号加短信验证码登录，好处：</li>
</ol>
</li>
<li>用不着重置密码操作了</li>
<li>不需要记密码，不怕密码泄露]]>
    
    </summary>
    
      <category term="API" scheme="http://jiuzhou-romens.github.io.git/tags/API/"/>
    
      <category term="总结" scheme="http://jiuzhou-romens.github.io.git/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="dev" scheme="http://jiuzhou-romens.github.io.git/categories/dev/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Andriod 架构设计]]></title>
    <link href="http://jiuzhou-romens.github.io.git/2016/05/26/Android%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    <id>http://jiuzhou-romens.github.io.git/2016/05/26/Android项目架构设计/</id>
    <published>2016-05-26T02:23:05.000Z</published>
    <updated>2016-05-26T02:23:05.000Z</updated>
    <content type="html"><![CDATA[<h2 id="1-_架构出发点">1. 架构出发点</h2><ul>
<li>可测试</li>
<li>可读性高</li>
<li>单一职责</li>
<li>依赖倒置</li>
<li>低耦合、高内聚</li>
<li>易于扩展<a id="more"></a>
<h2 id="2-_架构思想">2. 架构思想</h2><img src="http://7xs8qe.com2.z0.glb.qiniucdn.com/clean_architecture_android.png" alt="Dependency Rule"></li>
</ul>
<p>分为三层：</p>
<ul>
<li><strong>presentation</strong>，使用mvp模式，解耦界面与逻辑，易于修改界面，与domain层通过UseCase即Interactor进行交互。</li>
<li><strong>domain</strong>，业务逻辑。</li>
<li><strong>data</strong>，实现网络或本地存储的具体细节，与domain层采用repository模式交互，解耦业务逻辑与数据底层。</li>
</ul>
<h2 id="3-_架构细节">3. 架构细节</h2><p>presentation和data层有各自的数据实体，presentation层的model及data层的entity，在domain层使用mapper进行转换。</p>
<p>presentation层实现了mvp模式，v主要是fragment，activity尽量只作为fragment的容器存在，作为fragment的控制器。</p>
<p>domain层主要包含：</p>
<ul>
<li>interactor，usecase，每一个异步数据请求的入口</li>
<li>repository，data层的接口</li>
<li>mapper，作为另外两层数据的转化器</li>
<li>executor，线程控制器，ThreadExecutor作为后台线程，PostExecutionThread作为android的ui线程</li>
</ul>
<p>data层主要包含：</p>
<ul>
<li>cache，数据存储抽象</li>
<li>net，网络层请求封装</li>
<li>repository，实现domain层中的repository接口</li>
</ul>
<h2 id="4-_使用的第三方库">4. 使用的第三方库</h2><ul>
<li>dagger2，主要为了解耦对象的使用与构建，使得mock更加容易，便于unit test</li>
<li>butterKnife，view注入库，增加可读性</li>
<li>RxJava，避免callback hell，使代码逻辑更加清晰</li>
<li>okhttp3+retrofit2，使网络请求更加简单清晰，解耦</li>
<li>stetho，用来查看网络请求、view的hierarchy、本地存储详情</li>
<li>mockito+junit4，使mock对象更加容易，易于写单元测试</li>
<li>robolectric，模拟android环境，测试data层</li>
<li>espresso，ui自动化测试，测试presentation层</li>
<li>leakCanary，内存泄露测试</li>
</ul>
<h2 id="参考文档">参考文档</h2><h6 id="Clean_architecture"><a href="http://fernandocejas.com/2015/07/18/architecting-android-the-evolution/" target="_blank" rel="external">Clean architecture</a></h6>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="1-_架构出发点">1. 架构出发点</h2><ul>
<li>可测试</li>
<li>可读性高</li>
<li>单一职责</li>
<li>依赖倒置</li>
<li>低耦合、高内聚</li>
<li>易于扩展]]>
    
    </summary>
    
      <category term="Android" scheme="http://jiuzhou-romens.github.io.git/tags/Android/"/>
    
      <category term="总结" scheme="http://jiuzhou-romens.github.io.git/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="Android" scheme="http://jiuzhou-romens.github.io.git/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Swagger 使用]]></title>
    <link href="http://jiuzhou-romens.github.io.git/2016/05/25/Swagger%E4%BD%BF%E7%94%A8/"/>
    <id>http://jiuzhou-romens.github.io.git/2016/05/25/Swagger使用/</id>
    <published>2016-05-25T08:56:46.000Z</published>
    <updated>2016-05-25T08:56:46.000Z</updated>
    <content type="html"><![CDATA[<h4 id="Restful接口规范">Restful接口规范</h4><p>描述Restful接口设计、开发、测试(分别模拟客户端和服务器端)、以及联调的方式。</p>
<hr>
<h5 id="1-_关于Swagger">1. 关于<a href="http://www.swagger.io" target="_blank" rel="external">Swagger</a></h5><p><a href="http://www.swagger.io" target="_blank" rel="external">Swagger</a>是一个Restful定义描述语义。围绕Swagger, OpenSource世界提供了一组工具,覆盖了Restful接口定义、接口代码生成等。并可以直接导入<a href="http://www.getpostman.com/" target="_blank" rel="external">Postman</a>或者以<a href="#8-mock模式模拟接口">mock</a>方式模拟接口调用。</p>
<p>并且,还可以在接口定义中规范参数的格式、有效取值范围等合法性检查。<br><a id="more"></a></p>
<ul>
<li>安装swagger工具<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g swagger-cli&#10;$ npm install -g swagger-diff</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="2-_API定义文件">2. API定义文件</h5><p>所有的接口定义都已.yaml文件表述, 放置在RestAPI/yaml路径下。<br>  文件 |  定义   |  场景</p>
<h5 id="3-_如何检查yaml的语法">3. 如何检查yaml的语法</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ swagger validate Edi.yaml</span><br></pre></td></tr></table></figure>
<h5 id="4-_yaml自动生成markdown文档">4. yaml自动生成markdown文档</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd doc/RestAPIs/&#10;$ ../../bin/swagger2markup&#10;$ git commit -m &#34;Updated yaml&#38;md files&#34;&#10;$ git push</span><br></pre></td></tr></table></figure>
<p>将会在<a href="RestAPIs/">/doc/RestAPIs</a>下, 按照yaml定义生成markdown文档, 并git提交到repository中。</p>
<h5 id="5-_生成Server端代码">5. 生成Server端代码</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -jar bin/swagger-codegen-cli.jar generate -l nodejs-server -i doc/RestAPIs/yaml/&#60;file.yaml&#62; -o skeleton/nodejs</span><br></pre></td></tr></table></figure>
<p>node.js代码生成在<a href="../skeleton/nodejs">skeleton/nodejs</a>路径下。然后通过代码合并工具将接口上的新变化合并到<a href="../../scc-src">scc-src</a>的项目中。</p>
<h5 id="6-_生成客户端javascript代码">6. 生成客户端javascript代码</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -jar bin/swagger-codegen-cli.jar generate -l javascript -i doc/RestAPIs/yaml/&#60;file.yaml&#62; -o skeleton/javascript</span><br></pre></td></tr></table></figure>
<p>客户端javascript代码会生成在<a href="../skeleton/javascript">skeleton/javascript</a>路径下,然后使用代码合并工具将接口上的新变化合并到<a href="../../scc-react/">scc-react</a>项目中。</p>
<h5 id="7-_生成android客户端代码">7. 生成android客户端代码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -jar bin/swagger-codegen-cli.jar generate -l java -c bin/android_config.json -i doc/RestAPIs/yaml/&#60;file.yaml&#62; -o skeleton/android</span><br></pre></td></tr></table></figure>
<p>Android客户端java代码生成在<a href="../skeleton/android">skeleton/android</a>路径下, 然后使用代码合并工具将接口上的新变化合并到<a href="../../scc-mobile">scc-mobile</a>;</p>
<h5 id="8-_生成ios客户端代码">8. 生成ios客户端代码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -jar bin/swagger-codegen-cli.jar generate -l objc -i doc/RestAPIs/yaml/&#60;file.yaml&#62; -o skeleton/objc</span><br></pre></td></tr></table></figure>
<p>iOS客户端objective-c代码生成在<a href="../skeleton/objc">skeleton/objc</a>路径下, 然后使用代码合并工具将接口上的新变化合并到<a href="../../scc-mobile">scc-mobile</a>;</p>
<h5 id="8-_mock模式模拟接口">8. mock模式模拟接口</h5><p>mock模式用来模拟swagger中定义的接口。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd skeleton/nodejs/&#10;$ npm install&#10;$ node .</span><br></pre></td></tr></table></figure></p>
<p>在浏览器中打开<a href="http://127.0.0.1:8080/docs" target="_blank" rel="external">http://127.0.0.1:8080/docs</a></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ swagger</span><br></pre></td></tr></table></figure>
<h5 id="9-_导入Postman测试">9. 导入Postman测试</h5><p>可以将yaml文件直接import到postman中, 在postman中发起对服务器端的测试。</p>
<h2 id="参考资料:">参考资料:</h2><ul>
<li><a href="https://engineering.gosquared.com/building-better-api-docs" target="_blank" rel="external">ReaCall: React Practise with Swagger</a></li>
<li><a href="https://engineering.gosquared.com/building-better-api-docs" target="_blank" rel="external">Building Better API Docs with React And Swagger</a></li>
<li><a href="http://www.swagger.io" target="_blank" rel="external">Swagger Official Website</a></li>
<li><a href="https://github.com/Swagger2Markup/swagger2markup" target="_blank" rel="external">swagger2markup</a></li>
<li><a href="https://github.com/krakenjs/swaggerize-express" target="_blank" rel="external">swaggerize-express</a></li>
<li><a href="http://stackoverflow.com/questions/34655229/import-swagger-into-existing-project-in-android-studio" target="_blank" rel="external">Android使用swagger</a></li>
<li><a href="https://github.com/swagger-api/swagger-codegen/wiki/FAQ#how-can-i-generate-an-android-sdk" target="_blank" rel="external">使用swagger-codegen生成Android客户端</a></li>
<li><a href="http://www.rnavagamuwa.com/open-source/generate-client-side-code-using-swagger-codegen/" target="_blank" rel="external">用swagger生成客户端代码</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="Restful接口规范">Restful接口规范</h4><p>描述Restful接口设计、开发、测试(分别模拟客户端和服务器端)、以及联调的方式。</p>
<hr>
<h5 id="1-_关于Swagger">1. 关于<a href="http://www.swagger.io">Swagger</a></h5><p><a href="http://www.swagger.io">Swagger</a>是一个Restful定义描述语义。围绕Swagger, OpenSource世界提供了一组工具,覆盖了Restful接口定义、接口代码生成等。并可以直接导入<a href="http://www.getpostman.com/">Postman</a>或者以<a href="#8-mock模式模拟接口">mock</a>方式模拟接口调用。</p>
<p>并且,还可以在接口定义中规范参数的格式、有效取值范围等合法性检查。<br>]]>
    
    </summary>
    
      <category term="Restful" scheme="http://jiuzhou-romens.github.io.git/tags/Restful/"/>
    
      <category term="工具" scheme="http://jiuzhou-romens.github.io.git/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="技术" scheme="http://jiuzhou-romens.github.io.git/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Swift 学习记录 -- 闭包]]></title>
    <link href="http://jiuzhou-romens.github.io.git/2015/11/26/Swift%20%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%20--%20%E9%97%AD%E5%8C%85/"/>
    <id>http://jiuzhou-romens.github.io.git/2015/11/26/Swift 学习记录 -- 闭包/</id>
    <published>2015-11-26T09:38:33.000Z</published>
    <updated>2015-11-26T09:38:33.000Z</updated>
    <content type="html"><![CDATA[<p>闭包（Closures）是独立的函数代码块，能在代码中传递及使用。Swift中的闭包与C和Objective-C中的代码块及其它编程语言中的匿名函数相似。</p>
<p>闭包可以在上下文的范围内捕获、存储任何被定义的常量和变量引用。因这些常量和变量的封闭性，而命名为“闭包（Closures）”。Swift能够对所有你所能捕获到的引用进行内存管理。</p>
<p>函数实际上是一种特殊的闭包:它是一段能之后被调取的代码。闭包中的代码能访问闭包所建作用域中能得到的变量和函数,即使闭包是在一个不同的作用域被执行的（函数嵌套）。你可以使用{ }来创建一个匿名闭包。使用in将参数和返回值类型声明与闭包函数体进行分离。<br><a id="more"></a></p>
<h1 id="闭包格式">闭包格式</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    (参数:类型) -&gt;返回类型  <span class="keyword">in</span></span><br><span class="line">    </span><br><span class="line">    执行方法</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">return</span> 返回类型</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="示例代码">示例代码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var numbers = [<span class="number">20</span>, <span class="number">19</span>, <span class="number">7</span>, <span class="number">12</span>]</span><br><span class="line">numbers.map(&#123;</span><br><span class="line">    (number: Int) -&gt; Int <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">let</span> result = <span class="number">3</span> * number</span><br><span class="line">    <span class="built_in">return</span> result</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>
<h1 id="说明">说明</h1><blockquote>
<ol>
<li>闭包主要指向函数类型</li>
<li>闭包的参数必须和函数类型的参数和返回值一致</li>
<li>闭包简写方法</li>
</ol>
<ul>
<li>第一种简写 ：省略 参数类型和括号 </li>
<li>第二种简写 : 省略 参数类型和括号，return关键字</li>
<li>第三种简写 ： 参数名称缩写 (用$0代表第一个参数，$1代表第二个参数)</li>
</ul>
</blockquote>
<p>如果一个闭包的类型已知,比如作为一个回调函数,你可以忽略参数的类型和返回值。单个语句闭包会把它语句的值当做结果返回。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> mappedNumbers = numbers.map(&#123; number <span class="keyword">in</span> <span class="number">3</span> * number &#125;)</span><br><span class="line"><span class="built_in">print</span>(mappedNumbers)</span><br></pre></td></tr></table></figure>
<p>你可以通过参数位置而不是参数名字来引用参数——这个方法在非常短的闭包中非常有用。当一个闭包作为最后<br>一个参数传给一个函数的时候,它可以直接跟在括号后面。当一个闭包是传给函数的唯一参数,你可以完全忽略<br>括号。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> sortedNumbers = numbers.sort &#123; <span class="variable">$0</span> &gt; <span class="variable">$1</span> &#125;</span><br><span class="line"><span class="built_in">print</span>(sortedNumbers);</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>闭包（Closures）是独立的函数代码块，能在代码中传递及使用。Swift中的闭包与C和Objective-C中的代码块及其它编程语言中的匿名函数相似。</p>
<p>闭包可以在上下文的范围内捕获、存储任何被定义的常量和变量引用。因这些常量和变量的封闭性，而命名为“闭包（Closures）”。Swift能够对所有你所能捕获到的引用进行内存管理。</p>
<p>函数实际上是一种特殊的闭包:它是一段能之后被调取的代码。闭包中的代码能访问闭包所建作用域中能得到的变量和函数,即使闭包是在一个不同的作用域被执行的（函数嵌套）。你可以使用{ }来创建一个匿名闭包。使用in将参数和返回值类型声明与闭包函数体进行分离。<br>]]>
    
    </summary>
    
      <category term="Swift" scheme="http://jiuzhou-romens.github.io.git/tags/Swift/"/>
    
      <category term="基础" scheme="http://jiuzhou-romens.github.io.git/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="学习记录" scheme="http://jiuzhou-romens.github.io.git/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[UILable iOS9 改变]]></title>
    <link href="http://jiuzhou-romens.github.io.git/2015/11/26/UILable/"/>
    <id>http://jiuzhou-romens.github.io.git/2015/11/26/UILable/</id>
    <published>2015-11-26T06:13:56.000Z</published>
    <updated>2015-11-26T06:13:56.000Z</updated>
    <content type="html"><![CDATA[<p>UILable作为iOS最常用的控件之一</p>
<p><code>iOS 7.0 之后可用</code></p>
<blockquote>
<p>// 标题的风格<br>NSString <em>const UIFontTextStyleHeadline<br>// 副标题的风格<br>NSString </em>const UIFontTextStyleSubheadline<br>// 正文的字体<br>NSString <em>const UIFontTextStyleBody<br>// 脚注的字体<br>NSString </em>const UIFontTextStyleFootnote<br>// 标准字幕字体<br>NSString <em>const UIFontTextStyleCaption1<br>// 替换字幕字体<br>NSString </em>const UIFontTextStyleCaption2<br><a id="more"></a><br><img src="http://www.geovyn.com/images/lable.jpg" alt=""></p>
</blockquote>
<p><code>iOS 9.0 之后可用</code></p>
<blockquote>
<p>NSString <em>const UIFontTextStyleTitle1<br>NSString </em>const UIFontTextStyleTitle2<br>NSString *const UIFontTextStyleTitle3</p>
</blockquote>
<p>使用方式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UILabel *styleHead = [[UILabel alloc] initWithFrame:CGRectMake(<span class="number">50</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">100</span>)];</span><br><span class="line">  styleHead.text = @<span class="string">"这是一段测试文字"</span>;</span><br><span class="line">  styleHead.font = [UIFont preferredFontForTextStyle:UIFontTextStyleSubheadline];</span><br></pre></td></tr></table></figure></p>
<h2 id="多行文本设置(iOS9_未改变)">多行文本设置(iOS9 未改变)</h2><p>纯代码布局使用最多的就是 <code>NSLineBreakByWordWrapping</code> <code>preferredMaxLayoutWidth</code> </p>
<blockquote>
<p>// Wrap at word boundaries, default        文本边缘处理<br>   NSLineBreakByWordWrapping<br>// Wrap at character boundaries            提前处理不合适的字符<br>  NSLineBreakByCharWrapping<br>// Simply clip                            简单线性处理<br>  NSLineBreakByClipping<br>// Truncate at head of line: “…wxyz”    丢失的开头用省略号表示<br>  NSLineBreakByTruncatingHead<br>// Truncate at tail of line: “abcd…”    丢失的文本在末尾显示省略号<br>  NSLineBreakByTruncatingTail<br>// Truncate middle of line:  “ab…yz”    丢失的文本在中间显示省略号<br>  NSLineBreakByTruncatingMiddle</p>
</blockquote>
<h2 id="新属性(是否允许文字进行收缩)">新属性(是否允许文字进行收缩)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@property(nonatomic) BOOL allowsDefaultTighteningForTruncation;</span><br></pre></td></tr></table></figure>
<p>该特性常与 <code>@property(nonatomic) CGFloat minimumScaleFactor;(设置最小收缩比例)</code> 结合使用。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>UILable作为iOS最常用的控件之一</p>
<p><code>iOS 7.0 之后可用</code></p>
<blockquote>
<p>// 标题的风格<br>NSString <em>const UIFontTextStyleHeadline<br>// 副标题的风格<br>NSString </em>const UIFontTextStyleSubheadline<br>// 正文的字体<br>NSString <em>const UIFontTextStyleBody<br>// 脚注的字体<br>NSString </em>const UIFontTextStyleFootnote<br>// 标准字幕字体<br>NSString <em>const UIFontTextStyleCaption1<br>// 替换字幕字体<br>NSString </em>const UIFontTextStyleCaption2<br>]]>
    
    </summary>
    
      <category term="UILable" scheme="http://jiuzhou-romens.github.io.git/tags/UILable/"/>
    
      <category term="iOS" scheme="http://jiuzhou-romens.github.io.git/tags/iOS/"/>
    
      <category term="iOS之UI控件" scheme="http://jiuzhou-romens.github.io.git/tags/iOS%E4%B9%8BUI%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用SDWebImage加载大量图片造成内存泄露的解决方法]]></title>
    <link href="http://jiuzhou-romens.github.io.git/2015/11/25/SDWebImage%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://jiuzhou-romens.github.io.git/2015/11/25/SDWebImage内存泄露解决方案/</id>
    <published>2015-11-25T01:40:31.000Z</published>
    <updated>2015-11-25T01:40:31.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://github.com/rs/SDWebImage" target="_blank" rel="external">SDWebImage</a> 我相信是个<code>iOS</code>码农都用过，在 github 上 11K+ star , 国内外大多数 App 使用它来进行图片加载。最近在做列表展示的时候，下拉新增不断的增加内容，发现内存占用越来越大，导致 memory warning 最终 terminate 。<br>  <a id="more"></a><br> 在SDWebImage的代码中对memory warning 的处理:<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> - (void)clearMemory &#123;</span><br><span class="line">    [self.memCache removeAllObjects];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>其中self.memCache是NSCache类型的，虽然SDWebImage本身对内存警告执行了操作，然而并没有什么X用。</p>
</blockquote>
<p>借助google查看到问题的具体原因和解决方案 <a href="https://github.com/rs/SDWebImage/issues/538" target="_blank" rel="external">issues538</a>。<br>因此在使用SDWebImage加载大量网络图片时，在下拉加载(刷新)中执行下列代码可解决此问题:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[SDImageCache sharedImageCache] <span class="built_in">set</span>Value:nil <span class="keyword">for</span>Key:@<span class="string">"memCache"</span>];</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://github.com/rs/SDWebImage">SDWebImage</a> 我相信是个<code>iOS</code>码农都用过，在 github 上 11K+ star , 国内外大多数 App 使用它来进行图片加载。最近在做列表展示的时候，下拉新增不断的增加内容，发现内存占用越来越大，导致 memory warning 最终 terminate 。<br>]]>
    
    </summary>
    
      <category term="Objective-C" scheme="http://jiuzhou-romens.github.io.git/tags/Objective-C/"/>
    
      <category term="SDWebImage" scheme="http://jiuzhou-romens.github.io.git/tags/SDWebImage/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Xcode插件管理]]></title>
    <link href="http://jiuzhou-romens.github.io.git/2015/11/24/Xcode--%E6%8F%92%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    <id>http://jiuzhou-romens.github.io.git/2015/11/24/Xcode--插件管理/</id>
    <published>2015-11-24T10:30:28.000Z</published>
    <updated>2015-11-24T10:30:28.000Z</updated>
    <content type="html"><![CDATA[<h1 id="安装">安装</h1><p>终端输入:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://raw.githubusercontent.com/supermarin/Alcatraz/master/Scripts/install.sh | sh</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="卸载">卸载</h1><p>删除插件:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins/Alcatraz.xcplugin</span><br></pre></td></tr></table></figure></p>
<p>删除缓存数据:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ~/Library/Application\ Support/Alcatraz</span><br></pre></td></tr></table></figure></p>
<p><a href="http://www.cocoachina.com/industry/20130918/7022.html" target="_blank" rel="external">那些不能错过的Xcode插件</a><br><a href="http://www.bubuko.com/infodetail-963903.html" target="_blank" rel="external">插件无法运行</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="安装">安装</h1><p>终端输入:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://raw.githubusercontent.com/supermarin/Alcatraz/master/Scripts/install.sh | sh</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="Alcatraz" scheme="http://jiuzhou-romens.github.io.git/tags/Alcatraz/"/>
    
      <category term="Xcode" scheme="http://jiuzhou-romens.github.io.git/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Markdown学习指南]]></title>
    <link href="http://jiuzhou-romens.github.io.git/2015/11/24/Markdown/"/>
    <id>http://jiuzhou-romens.github.io.git/2015/11/24/Markdown/</id>
    <published>2015-11-24T06:39:59.000Z</published>
    <updated>2015-11-24T06:39:59.000Z</updated>
    <content type="html"><![CDATA[<p> Markdown的语法已经足够简单，但是现有的<a href="http://wowubuntu.com/markdown/" target="_blank" rel="external">Markdown语法</a>说明更多的是写给web从业者看的，对于很多写作者来说，学习起来效率很低，从<a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="external">作业部落</a>到<a href="http://www.jianshu.com/" target="_blank" rel="external">简书</a>，从写作者的实际需求出发，总结真正实用的常用格式，深入浅出 <code>Markdown</code> 语法。<br> <a id="more"></a></p>
<h1 id="标题">标题</h1><p>这是最为常用的格式，在<code>Markdown</code>中，你只需要在文本前面加上<code>#</code>号，标题分级，增加<code>#</code>即可。</p>
<blockquote>
<h1 id="一级标题">一级标题</h1><h2 id="二级标题">二级标题</h2><h3 id="三级标题">三级标题</h3><h4 id="四级标题">四级标题</h4><h5 id="五级标题">五级标题</h5><h6 id="六级标题">六级标题</h6></blockquote>
<p>注意：<code>#</code>和<code>一级标题</code>之间保留一个空格，这才是<code>Markdown</code>的标准写法。</p>
<h1 id="列表">列表</h1><p>列表格式也很常用，在 Markdown 中，你只需要在文字前面加上<code>-</code>(无序)或者<code>1.</code>(有序)就可以了，例如：</p>
<blockquote>
<ul>
<li>参考文本1</li>
<li>参考文本2</li>
<li>参考文本3</li>
</ul>
<ol>
<li>参考文本1</li>
<li>参考文本2</li>
<li>参考文本3</li>
</ol>
</blockquote>
<p>注意：<code>-</code> <code>1.</code>和参考文本之间保留一个空格。</p>
<h1 id="链接和图片">链接和图片</h1><p>在<code>Markdown</code>中，插入链接你只需要使用<code>[显示文本](链接地址)</code> 这样的语法即可，例如：<br><a href="http://www.geovyn.com" target="_blank" rel="external">我的博客</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[我的博客](http://www.geovyn.com)</span><br></pre></td></tr></table></figure></p>
<p>在<code>Markdown</code>中，插入图片你只需要使用 <code>![](图片地址)</code> 这样的语法即可，例如：<br><img src="http://www.geovyn.com/images/avatar.jpg" alt=""><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](http://www.geovyn.com/images/avatar.jpg)</span><br></pre></td></tr></table></figure></p>
<h1 id="引用">引用</h1><p>写作的时候需要引用他人的文字，这个时候引用这个格式就很有必要了，在<code>Markdown</code>中，你只需要在你希望引用的文字前面加上<code>&gt;</code>就好了。例如：</p>
<blockquote>
<p>床前明月光<br>疑是地上霜<br>举头望明月<br>低头思故乡</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; 床前明月光</span><br><span class="line">&gt; 疑是地上霜</span><br><span class="line">&gt; 举头望明月</span><br><span class="line">&gt; 低头思故乡</span><br></pre></td></tr></table></figure>
<h1 id="粗体和斜体">粗体和斜体</h1><p>用两个<code>*</code>包含一段文本就是粗体的语法，用一个<code>*</code>包含一段文本就是斜体的语法。例如：<br>    <strong>2015</strong> <em>美好开始</em><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**<span class="number">2015</span>** *美好开始*</span><br></pre></td></tr></table></figure></p>
<h1 id="表格">表格</h1><p>默认居左,<code>:----:</code>居中,<code>-----:</code>居右。</p>
<table>
<thead>
<tr>
<th>姓名:</th>
<th style="text-align:center">性别:</th>
<th style="text-align:right">年龄:</th>
</tr>
</thead>
<tbody>
<tr>
<td>张三</td>
<td style="text-align:center">男</td>
<td style="text-align:right">18</td>
</tr>
<tr>
<td>李四</td>
<td style="text-align:center">男</td>
<td style="text-align:right">19</td>
</tr>
<tr>
<td>王小妹</td>
<td style="text-align:center">女</td>
<td style="text-align:right">20</td>
</tr>
</tbody>
</table>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 姓名:          | 性别:         | 年龄:  |</span><br><span class="line">| ------------- |:-------------:|-----:|</span><br><span class="line">| 张三           | 男            | <span class="number">18</span>    |</span><br><span class="line">| 李四           | 男            | <span class="number">19</span>    |</span><br><span class="line">| 王小妹         | 女            | <span class="number">20</span>    |</span><br></pre></td></tr></table></figure>
<h1 id="显示链接中带括号的图片">显示链接中带括号的图片</h1><p><img src="http://latex.codecogs.com/gif.latex?\prod%20\(n_{i}\)+1" alt=""></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![][<span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>]: http://latex.codecogs.com/gif.latex?\prod%<span class="number">20</span>\(n_&#123;i&#125;\)+<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h1 id="阅读更多">阅读更多</h1><p>使用代码<code>&lt;!-- more --&gt;</code>即可。</p>
<h1 id="结语">结语</h1><p>以上几种格式是比较常用的格式，对于写作来说应该基本够用了，如果想了解跟多可以参考<a href="http://wowubuntu.com/markdown/" target="_blank" rel="external">Markdown语法说明</a>。<br>强烈建议您现在就立马用 Markdown 写一篇文章吧，体会一下 Markdown 的优雅之处！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p> Markdown的语法已经足够简单，但是现有的<a href="http://wowubuntu.com/markdown/">Markdown语法</a>说明更多的是写给web从业者看的，对于很多写作者来说，学习起来效率很低，从<a href="https://www.zybuluo.com/mdeditor">作业部落</a>到<a href="http://www.jianshu.com/">简书</a>，从写作者的实际需求出发，总结真正实用的常用格式，深入浅出 <code>Markdown</code> 语法。<br>]]>
    
    </summary>
    
      <category term="Markdown" scheme="http://jiuzhou-romens.github.io.git/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo主题Yilia]]></title>
    <link href="http://jiuzhou-romens.github.io.git/2015/11/24/Hexo%E4%B8%BB%E9%A2%98/"/>
    <id>http://jiuzhou-romens.github.io.git/2015/11/24/Hexo主题/</id>
    <published>2015-11-24T01:56:20.000Z</published>
    <updated>2015-11-24T01:56:19.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external">hexo-theme-yilia</a> 是为 <a href="https://github.com/tommy351/hexo" target="_blank" rel="external">hexo</a> 2.4+制作的主题。<br>响应式设计，风格简约。<br><a id="more"></a><br>终于从octopress迁移到hexo。Yilia是自己设计的主题，分享之，有爱请自取。关于主题：</p>
<ol>
<li>我喜欢简约。所以标签云，搜索框都拿掉了</li>
<li>接地气一点。所以用上了jiathis分享，友言评论，以及baidu的cdn</li>
<li>让大家把注意力放到内容上。这是本主题设计初衷</li>
<li>主题不支持IE6，7，8。以后也不会</li>
</ol>
<p>一、使用</p>
<p><strong>1. 安装</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure>
<p><strong>2. 配置</strong></p>
<p>修改hexo根目录下的 <code>_config.yml</code> ： <code>theme: yilia</code></p>
<p><strong>3. 更新</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/yilia</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure>
<p>二、外观</p>
<p><strong>宽屏</strong><br><img src="http://littendomo.sinaapp.com/yilia/yilia-pc1.png" alt="宽屏">        </p>
<p><strong>宽屏文字</strong><br><img src="http://littendomo.sinaapp.com/yilia/yilia-pc2.png" alt="宽屏文字">   </p>
<p><strong>窄屏</strong><br><img src="http://littendomo.sinaapp.com/yilia/yilia-pc3.png" alt="窄屏">     </p>
<p><strong>同步instagram</strong><br><img src="http://littendomo.sinaapp.com/yilia/yilia-pc4.png" alt="同步instagram"></p>
<p><strong>移动端</strong><br><img src="http://littendomo.sinaapp.com/yilia/yilia-mobile.png" alt="移动端"><br><img src="http://littendomo.sinaapp.com/yilia/yilia-mobile2.png" alt="移动端">   </p>
<p>三、配置</p>
<p>主题配置文件在主目录下的<code>_config.yml</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># Header&#10;menu:&#10;  &#20027;&#39029;: /&#10;  &#25152;&#26377;&#25991;&#31456;: /archives&#10;  # &#38543;&#31508;: /tags/&#38543;&#31508;&#10;&#10;# SubNav&#10;subnav:&#10;  github: &#34;https://github.com/litten&#34;&#10;  weibo: &#34;http://weibo.com/litten225&#34;&#10;  rss: &#34;http://feed.feedsky.com/litten&#34;&#10;  # facebook: &#34;/&#34;&#10;  # google: &#34;/&#34;&#10;  # twitter: &#34;/&#34;&#10;  # linkedin: &#34;/&#34;&#10;&#10;rss: /atom.xml&#10;&#10;# Content&#10;excerpt_link: more&#10;fancybox: true&#10;&#10;# Miscellaneous&#10;&#10;favicon: /favicon.png&#10;&#10;avatar: &#34;https://avatars2.githubusercontent.com/u/2024949?v=2&#38;s=150&#34;&#10;share: true&#10;duoshuo: true</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://github.com/litten/hexo-theme-yilia">hexo-theme-yilia</a> 是为 <a href="https://github.com/tommy351/hexo">hexo</a> 2.4+制作的主题。<br>响应式设计，风格简约。<br>]]>
    
    </summary>
    
      <category term="Hexo" scheme="http://jiuzhou-romens.github.io.git/tags/Hexo/"/>
    
      <category term="主题" scheme="http://jiuzhou-romens.github.io.git/tags/%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://jiuzhou-romens.github.io.git/2015/11/23/Hello%20World/"/>
    <id>http://jiuzhou-romens.github.io.git/2015/11/23/Hello World/</id>
    <published>2015-11-23T08:51:53.000Z</published>
    <updated>2015-11-23T08:51:53.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.<br>]]>
    
    </summary>
    
      <category term="Hexo" scheme="http://jiuzhou-romens.github.io.git/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Swift 学习记录]]></title>
    <link href="http://jiuzhou-romens.github.io.git/2015/11/20/Swift%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/"/>
    <id>http://jiuzhou-romens.github.io.git/2015/11/20/Swift基础部分/</id>
    <published>2015-11-20T05:50:12.000Z</published>
    <updated>2015-11-26T06:51:12.000Z</updated>
    <content type="html"><![CDATA[<p>Swift 是一门开发 iOS, OS X 和 watchOS 应用的新语言。然而，如果你有 C 或者 Objective-C 开发经验的话，你会发现 Swift 的很多内容都是你熟悉的。<br><a id="more"></a></p>
<h1 id="简单值">简单值</h1><p>swift 全局作用域的代码会自动当做程序的入口，所以你不需要main函数，同样你也不需要在每个函数结尾加上分号。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"Hello, World!"</span>)</span><br></pre></td></tr></table></figure></p>
<h1 id="数组">数组</h1><p>swift 使用方括号 <code>[ ]</code> 来创建数组和字典,并使用下标或者键 (key) 来访问元素。最后一个元素后面允许有个逗号。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var shopingList = [<span class="string">"apple"</span>,<span class="string">"orange"</span>,<span class="string">"bananer"</span>]; // 数组</span><br><span class="line">var occupations = [<span class="string">"He"</span>:<span class="string">"Captain"</span>,<span class="string">"She"</span>:<span class="string">"Mechanic"</span>]; // 字典</span><br><span class="line">// 创建一个空数组或者字典,使用初始化语法</span><br><span class="line"><span class="built_in">let</span> emptyArr = [String]()</span><br><span class="line"><span class="built_in">let</span> emptyDictionary = [String:Float]();</span><br><span class="line"></span><br><span class="line">// 类型信息可以被推断出来</span><br><span class="line">shopingList = [];</span><br><span class="line">occupations = [:];</span><br></pre></td></tr></table></figure></p>
<h1 id="控制流">控制流</h1><p>swift 使用if switch 进行条件操作  使用for in ，for while <code>repeat</code>-while 进行循环  （条件和循环变量括号可以省略 但是语句体的大括号是必须的）</p>
<p>在if语句中，条件必须是一个布尔表达式–这意味着 if score {…} 这样的代码报错，而不会隐形的与0作对比，你可以一起使用if 和 let 来处理值缺失的情况，有些变量的值是可选的可能是一个具体的值或者是nil表示值缺失 在类型后面加一个问号来标记这个值是可选的</p>
<p>如果可选值是nil 条件判断会是false 大括号中代码会被跳过，如果不是nil 会将值赋给let 后面的常量 这样代码块就可以使用这个值了(声明let可以用于匹配某部分固定值的模式).<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var optionalString: String?=<span class="string">"Hello"</span></span><br><span class="line">var optionalName: String? = nil</span><br><span class="line">var greeting = <span class="string">"Hello"</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">let</span> name = optionalName</span><br><span class="line">&#123;</span><br><span class="line">    greeting = <span class="string">"hello,\(name)"</span></span><br><span class="line">    <span class="built_in">print</span>(greeting);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">let</span> name = optionalName</span><br><span class="line">    greeting = <span class="string">"hello world \(name)"</span></span><br><span class="line">    <span class="built_in">print</span>(greeting)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>switch 支持任意类型的数据以及各种比较操作——不仅仅是整数以及测试相等。运行 switch 中匹配到的子句之后,程序会退出 switch 语句,并不会继续向下运行,所以不需要在每个子句结尾 写 break 。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> vegetable = <span class="string">"celery"</span></span><br><span class="line">    switch vegetable &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">let</span> x <span class="built_in">where</span> x.hasSuffix(<span class="string">"y"</span>):</span><br><span class="line">            <span class="built_in">let</span> vegetableComment = <span class="string">"Is it a spicy \(x)?"</span></span><br><span class="line">            <span class="built_in">print</span>(vegetableComment)</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"celery"</span>:</span><br><span class="line">            <span class="built_in">let</span> vegetableComment = <span class="string">"Add some raisins and make ants on a log."</span></span><br><span class="line">            <span class="built_in">print</span>(vegetableComment)</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"cucumber"</span>, <span class="string">"watercress"</span>:</span><br><span class="line">            <span class="built_in">let</span> vegetableComment = <span class="string">"That would make a good tea sandwich."</span></span><br><span class="line">            <span class="built_in">print</span>(vegetableComment)</span><br><span class="line">        default:</span><br><span class="line">            <span class="built_in">let</span> vegetableComment = <span class="string">"Everything tastes good in soup."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>你可以使用for - in 遍历字典 需要两个变量来表示每个键值对，字典是一个无序的集合，所以他们的键和值以任意顺序迭代结束</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> interestingNumber = [<span class="string">"Fibonacci"</span>:[<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>],<span class="string">"Square"</span>:[<span class="number">1</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">16</span>,<span class="number">25</span>],<span class="string">"prime"</span>:[<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>]]</span><br><span class="line">var largest = <span class="number">0</span>;</span><br><span class="line">var strKind :String = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span>(kind, numbers) <span class="keyword">in</span> interestingNumber</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> numbers</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> number &gt; largest</span><br><span class="line">        &#123;</span><br><span class="line">            largest = number;</span><br><span class="line">            strKind = kind;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>你可以在循环中使用 ..&lt; 来表示范围,也可以使用传统的写法,两者是等价的, 使用 ..&lt; 创建的范围不包含上界,如果想包含的话需要使用 …<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var firstForLoop = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">4</span>&#123;</span><br><span class="line">firstForLoop += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(firstForLoop)</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Swift 是一门开发 iOS, OS X 和 watchOS 应用的新语言。然而，如果你有 C 或者 Objective-C 开发经验的话，你会发现 Swift 的很多内容都是你熟悉的。<br>]]>
    
    </summary>
    
      <category term="Swift" scheme="http://jiuzhou-romens.github.io.git/tags/Swift/"/>
    
      <category term="基础" scheme="http://jiuzhou-romens.github.io.git/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="学习记录" scheme="http://jiuzhou-romens.github.io.git/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
</feed>
